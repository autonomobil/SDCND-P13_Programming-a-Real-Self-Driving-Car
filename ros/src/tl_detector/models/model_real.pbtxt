node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 128
        }
        dim {
          size: 64
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "conv1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0828078687191
      }
    }
  }
}
node {
  name: "conv1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0828078687191
      }
    }
  }
}
node {
  name: "conv1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv1/weights/Initializer/random_uniform/max"
  input: "conv1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
}
node {
  name: "conv1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv1/weights/Initializer/random_uniform/RandomUniform"
  input: "conv1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
}
node {
  name: "conv1/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv1/weights/Initializer/random_uniform/mul"
  input: "conv1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
}
node {
  name: "conv1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1/weights/Assign"
  op: "Assign"
  input: "conv1/weights"
  input: "conv1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/weights/read"
  op: "Identity"
  input: "conv1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
}
node {
  name: "conv1/convolution/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "conv1/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv1/convolution"
  op: "Conv2D"
  input: "Placeholder"
  input: "conv1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1/BatchNorm/beta/Assign"
  op: "Assign"
  input: "conv1/BatchNorm/beta"
  input: "conv1/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/BatchNorm/beta/read"
  op: "Identity"
  input: "conv1/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "conv1/BatchNorm/moving_mean"
  input: "conv1/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "conv1/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "conv1/BatchNorm/moving_variance"
  input: "conv1/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "conv1/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/moments/mean"
  op: "Mean"
  input: "conv1/convolution"
  input: "conv1/BatchNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/BatchNorm/moments/StopGradient"
  op: "StopGradient"
  input: "conv1/BatchNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1/BatchNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "conv1/convolution"
  input: "conv1/BatchNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1/BatchNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/moments/variance"
  op: "Mean"
  input: "conv1/BatchNorm/moments/SquaredDifference"
  input: "conv1/BatchNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/BatchNorm/moments/Squeeze"
  op: "Squeeze"
  input: "conv1/BatchNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
        i: 2
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/moments/Squeeze_1"
  op: "Squeeze"
  input: "conv1/BatchNorm/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
        i: 2
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/AssignMovingAvg/sub"
  op: "Sub"
  input: "conv1/BatchNorm/moving_mean/read"
  input: "conv1/BatchNorm/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/AssignMovingAvg/mul"
  op: "Mul"
  input: "conv1/BatchNorm/AssignMovingAvg/sub"
  input: "conv1/BatchNorm/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/AssignMovingAvg"
  op: "AssignSub"
  input: "conv1/BatchNorm/moving_mean"
  input: "conv1/BatchNorm/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "conv1/BatchNorm/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "conv1/BatchNorm/moving_variance/read"
  input: "conv1/BatchNorm/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "conv1/BatchNorm/AssignMovingAvg_1/sub"
  input: "conv1/BatchNorm/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/AssignMovingAvg_1"
  op: "AssignSub"
  input: "conv1/BatchNorm/moving_variance"
  input: "conv1/BatchNorm/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "conv1/BatchNorm/Identity"
  op: "Identity"
  input: "conv1/BatchNorm/moments/Squeeze"
  input: "^conv1/BatchNorm/AssignMovingAvg"
  input: "^conv1/BatchNorm/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1/BatchNorm/Identity_1"
  op: "Identity"
  input: "conv1/BatchNorm/moments/Squeeze_1"
  input: "^conv1/BatchNorm/AssignMovingAvg"
  input: "^conv1/BatchNorm/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1/BatchNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/batchnorm/add"
  op: "Add"
  input: "conv1/BatchNorm/Identity_1"
  input: "conv1/BatchNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1/BatchNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "conv1/BatchNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1/BatchNorm/batchnorm/mul"
  op: "Mul"
  input: "conv1/convolution"
  input: "conv1/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1/BatchNorm/batchnorm/mul_1"
  op: "Mul"
  input: "conv1/BatchNorm/Identity"
  input: "conv1/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1/BatchNorm/batchnorm/sub"
  op: "Sub"
  input: "conv1/BatchNorm/beta/read"
  input: "conv1/BatchNorm/batchnorm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1/BatchNorm/batchnorm/add_1"
  op: "Add"
  input: "conv1/BatchNorm/batchnorm/mul"
  input: "conv1/BatchNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1/Relu"
  op: "Relu"
  input: "conv1/BatchNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "pool1/MaxPool"
  op: "MaxPool"
  input: "conv1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "conv2/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0500000007451
      }
    }
  }
}
node {
  name: "conv2/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0500000007451
      }
    }
  }
}
node {
  name: "conv2/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2/weights/Initializer/random_uniform/max"
  input: "conv2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
}
node {
  name: "conv2/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2/weights/Initializer/random_uniform/RandomUniform"
  input: "conv2/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
}
node {
  name: "conv2/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv2/weights/Initializer/random_uniform/mul"
  input: "conv2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
}
node {
  name: "conv2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2/weights/Assign"
  op: "Assign"
  input: "conv2/weights"
  input: "conv2/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/weights/read"
  op: "Identity"
  input: "conv2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
}
node {
  name: "conv2/convolution/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv2/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv2/convolution"
  op: "Conv2D"
  input: "pool1/MaxPool"
  input: "conv2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2/BatchNorm/beta/Assign"
  op: "Assign"
  input: "conv2/BatchNorm/beta"
  input: "conv2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/BatchNorm/beta/read"
  op: "Identity"
  input: "conv2/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "conv2/BatchNorm/moving_mean"
  input: "conv2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "conv2/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "conv2/BatchNorm/moving_variance"
  input: "conv2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "conv2/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/moments/mean"
  op: "Mean"
  input: "conv2/convolution"
  input: "conv2/BatchNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/BatchNorm/moments/StopGradient"
  op: "StopGradient"
  input: "conv2/BatchNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2/BatchNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "conv2/convolution"
  input: "conv2/BatchNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2/BatchNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/moments/variance"
  op: "Mean"
  input: "conv2/BatchNorm/moments/SquaredDifference"
  input: "conv2/BatchNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/BatchNorm/moments/Squeeze"
  op: "Squeeze"
  input: "conv2/BatchNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
        i: 2
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/moments/Squeeze_1"
  op: "Squeeze"
  input: "conv2/BatchNorm/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
        i: 2
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/AssignMovingAvg/sub"
  op: "Sub"
  input: "conv2/BatchNorm/moving_mean/read"
  input: "conv2/BatchNorm/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/AssignMovingAvg/mul"
  op: "Mul"
  input: "conv2/BatchNorm/AssignMovingAvg/sub"
  input: "conv2/BatchNorm/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/AssignMovingAvg"
  op: "AssignSub"
  input: "conv2/BatchNorm/moving_mean"
  input: "conv2/BatchNorm/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "conv2/BatchNorm/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "conv2/BatchNorm/moving_variance/read"
  input: "conv2/BatchNorm/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "conv2/BatchNorm/AssignMovingAvg_1/sub"
  input: "conv2/BatchNorm/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/AssignMovingAvg_1"
  op: "AssignSub"
  input: "conv2/BatchNorm/moving_variance"
  input: "conv2/BatchNorm/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "conv2/BatchNorm/Identity"
  op: "Identity"
  input: "conv2/BatchNorm/moments/Squeeze"
  input: "^conv2/BatchNorm/AssignMovingAvg"
  input: "^conv2/BatchNorm/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2/BatchNorm/Identity_1"
  op: "Identity"
  input: "conv2/BatchNorm/moments/Squeeze_1"
  input: "^conv2/BatchNorm/AssignMovingAvg"
  input: "^conv2/BatchNorm/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2/BatchNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/batchnorm/add"
  op: "Add"
  input: "conv2/BatchNorm/Identity_1"
  input: "conv2/BatchNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2/BatchNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "conv2/BatchNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2/BatchNorm/batchnorm/mul"
  op: "Mul"
  input: "conv2/convolution"
  input: "conv2/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2/BatchNorm/batchnorm/mul_1"
  op: "Mul"
  input: "conv2/BatchNorm/Identity"
  input: "conv2/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2/BatchNorm/batchnorm/sub"
  op: "Sub"
  input: "conv2/BatchNorm/beta/read"
  input: "conv2/BatchNorm/batchnorm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2/BatchNorm/batchnorm/add_1"
  op: "Add"
  input: "conv2/BatchNorm/batchnorm/mul"
  input: "conv2/BatchNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2/Relu"
  op: "Relu"
  input: "conv2/BatchNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "pool2/MaxPool"
  op: "MaxPool"
  input: "conv2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "conv3/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv3/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0353553406894
      }
    }
  }
}
node {
  name: "conv3/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0353553406894
      }
    }
  }
}
node {
  name: "conv3/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv3/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv3/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv3/weights/Initializer/random_uniform/max"
  input: "conv3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
}
node {
  name: "conv3/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv3/weights/Initializer/random_uniform/RandomUniform"
  input: "conv3/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
}
node {
  name: "conv3/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv3/weights/Initializer/random_uniform/mul"
  input: "conv3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
}
node {
  name: "conv3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv3/weights/Assign"
  op: "Assign"
  input: "conv3/weights"
  input: "conv3/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv3/weights/read"
  op: "Identity"
  input: "conv3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
}
node {
  name: "conv3/convolution/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv3/convolution/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "conv3/convolution"
  op: "Conv2D"
  input: "pool2/MaxPool"
  input: "conv3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv3/BatchNorm/beta/Assign"
  op: "Assign"
  input: "conv3/BatchNorm/beta"
  input: "conv3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv3/BatchNorm/beta/read"
  op: "Identity"
  input: "conv3/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv3/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "conv3/BatchNorm/moving_mean"
  input: "conv3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv3/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "conv3/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv3/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "conv3/BatchNorm/moving_variance"
  input: "conv3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv3/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "conv3/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/moments/mean"
  op: "Mean"
  input: "conv3/convolution"
  input: "conv3/BatchNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "conv3/BatchNorm/moments/StopGradient"
  op: "StopGradient"
  input: "conv3/BatchNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv3/BatchNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "conv3/convolution"
  input: "conv3/BatchNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv3/BatchNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/moments/variance"
  op: "Mean"
  input: "conv3/BatchNorm/moments/SquaredDifference"
  input: "conv3/BatchNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "conv3/BatchNorm/moments/Squeeze"
  op: "Squeeze"
  input: "conv3/BatchNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
        i: 2
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/moments/Squeeze_1"
  op: "Squeeze"
  input: "conv3/BatchNorm/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
        i: 1
        i: 2
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/AssignMovingAvg/sub"
  op: "Sub"
  input: "conv3/BatchNorm/moving_mean/read"
  input: "conv3/BatchNorm/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/AssignMovingAvg/mul"
  op: "Mul"
  input: "conv3/BatchNorm/AssignMovingAvg/sub"
  input: "conv3/BatchNorm/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/AssignMovingAvg"
  op: "AssignSub"
  input: "conv3/BatchNorm/moving_mean"
  input: "conv3/BatchNorm/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "conv3/BatchNorm/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "conv3/BatchNorm/moving_variance/read"
  input: "conv3/BatchNorm/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "conv3/BatchNorm/AssignMovingAvg_1/sub"
  input: "conv3/BatchNorm/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/AssignMovingAvg_1"
  op: "AssignSub"
  input: "conv3/BatchNorm/moving_variance"
  input: "conv3/BatchNorm/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "conv3/BatchNorm/Identity"
  op: "Identity"
  input: "conv3/BatchNorm/moments/Squeeze"
  input: "^conv3/BatchNorm/AssignMovingAvg"
  input: "^conv3/BatchNorm/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv3/BatchNorm/Identity_1"
  op: "Identity"
  input: "conv3/BatchNorm/moments/Squeeze_1"
  input: "^conv3/BatchNorm/AssignMovingAvg"
  input: "^conv3/BatchNorm/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv3/BatchNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/batchnorm/add"
  op: "Add"
  input: "conv3/BatchNorm/Identity_1"
  input: "conv3/BatchNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv3/BatchNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "conv3/BatchNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv3/BatchNorm/batchnorm/mul"
  op: "Mul"
  input: "conv3/convolution"
  input: "conv3/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv3/BatchNorm/batchnorm/mul_1"
  op: "Mul"
  input: "conv3/BatchNorm/Identity"
  input: "conv3/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv3/BatchNorm/batchnorm/sub"
  op: "Sub"
  input: "conv3/BatchNorm/beta/read"
  input: "conv3/BatchNorm/batchnorm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv3/BatchNorm/batchnorm/add_1"
  op: "Add"
  input: "conv3/BatchNorm/batchnorm/mul"
  input: "conv3/BatchNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv3/Relu"
  op: "Relu"
  input: "conv3/BatchNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout2/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dropout2/dropout/Shape"
  op: "Shape"
  input: "conv3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout2/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout2/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout2/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout2/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout2/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout2/dropout/random_uniform/max"
  input: "dropout2/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout2/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout2/dropout/random_uniform/RandomUniform"
  input: "dropout2/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout2/dropout/random_uniform"
  op: "Add"
  input: "dropout2/dropout/random_uniform/mul"
  input: "dropout2/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout2/dropout/add"
  op: "Add"
  input: "dropout2/dropout/keep_prob"
  input: "dropout2/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout2/dropout/Floor"
  op: "Floor"
  input: "dropout2/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout2/dropout/div"
  op: "RealDiv"
  input: "conv3/Relu"
  input: "dropout2/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout2/dropout/mul"
  op: "Mul"
  input: "dropout2/dropout/div"
  input: "dropout2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "pool3/MaxPool"
  op: "MaxPool"
  input: "dropout2/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "flatten3/Shape"
  op: "Shape"
  input: "pool3/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten3/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten3/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "flatten3/Slice"
  op: "Slice"
  input: "flatten3/Shape"
  input: "flatten3/Slice/begin"
  input: "flatten3/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten3/Slice_1/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "flatten3/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "flatten3/Slice_1"
  op: "Slice"
  input: "flatten3/Shape"
  input: "flatten3/Slice_1/begin"
  input: "flatten3/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten3/Prod"
  op: "Prod"
  input: "flatten3/Slice_1"
  input: "flatten3/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "flatten3/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten3/ExpandDims"
  op: "ExpandDims"
  input: "flatten3/Prod"
  input: "flatten3/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten3/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "flatten3/concat"
  op: "ConcatV2"
  input: "flatten3/Slice"
  input: "flatten3/ExpandDims"
  input: "flatten3/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "flatten3/Reshape"
  op: "Reshape"
  input: "pool3/MaxPool"
  input: "flatten3/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "fc3/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000@\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "fc3/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0185652673244
      }
    }
  }
}
node {
  name: "fc3/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0185652673244
      }
    }
  }
}
node {
  name: "fc3/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "fc3/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "fc3/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "fc3/weights/Initializer/random_uniform/max"
  input: "fc3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
}
node {
  name: "fc3/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "fc3/weights/Initializer/random_uniform/RandomUniform"
  input: "fc3/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
}
node {
  name: "fc3/weights/Initializer/random_uniform"
  op: "Add"
  input: "fc3/weights/Initializer/random_uniform/mul"
  input: "fc3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
}
node {
  name: "fc3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16384
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc3/weights/Assign"
  op: "Assign"
  input: "fc3/weights"
  input: "fc3/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc3/weights/read"
  op: "Identity"
  input: "fc3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
}
node {
  name: "fc3/MatMul"
  op: "MatMul"
  input: "flatten3/Reshape"
  input: "fc3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fc3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc3/BatchNorm/beta/Assign"
  op: "Assign"
  input: "fc3/BatchNorm/beta"
  input: "fc3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc3/BatchNorm/beta/read"
  op: "Identity"
  input: "fc3/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc3/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "fc3/BatchNorm/moving_mean"
  input: "fc3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc3/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "fc3/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc3/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "fc3/BatchNorm/moving_variance"
  input: "fc3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc3/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "fc3/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/moments/mean"
  op: "Mean"
  input: "fc3/MatMul"
  input: "fc3/BatchNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "fc3/BatchNorm/moments/StopGradient"
  op: "StopGradient"
  input: "fc3/BatchNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc3/BatchNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "fc3/MatMul"
  input: "fc3/BatchNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc3/BatchNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/moments/variance"
  op: "Mean"
  input: "fc3/BatchNorm/moments/SquaredDifference"
  input: "fc3/BatchNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "fc3/BatchNorm/moments/Squeeze"
  op: "Squeeze"
  input: "fc3/BatchNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/moments/Squeeze_1"
  op: "Squeeze"
  input: "fc3/BatchNorm/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/AssignMovingAvg/sub"
  op: "Sub"
  input: "fc3/BatchNorm/moving_mean/read"
  input: "fc3/BatchNorm/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/AssignMovingAvg/mul"
  op: "Mul"
  input: "fc3/BatchNorm/AssignMovingAvg/sub"
  input: "fc3/BatchNorm/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/AssignMovingAvg"
  op: "AssignSub"
  input: "fc3/BatchNorm/moving_mean"
  input: "fc3/BatchNorm/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "fc3/BatchNorm/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "fc3/BatchNorm/moving_variance/read"
  input: "fc3/BatchNorm/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "fc3/BatchNorm/AssignMovingAvg_1/sub"
  input: "fc3/BatchNorm/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/AssignMovingAvg_1"
  op: "AssignSub"
  input: "fc3/BatchNorm/moving_variance"
  input: "fc3/BatchNorm/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "fc3/BatchNorm/Identity"
  op: "Identity"
  input: "fc3/BatchNorm/moments/Squeeze"
  input: "^fc3/BatchNorm/AssignMovingAvg"
  input: "^fc3/BatchNorm/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc3/BatchNorm/Identity_1"
  op: "Identity"
  input: "fc3/BatchNorm/moments/Squeeze_1"
  input: "^fc3/BatchNorm/AssignMovingAvg"
  input: "^fc3/BatchNorm/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc3/BatchNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/batchnorm/add"
  op: "Add"
  input: "fc3/BatchNorm/Identity_1"
  input: "fc3/BatchNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc3/BatchNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "fc3/BatchNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc3/BatchNorm/batchnorm/mul"
  op: "Mul"
  input: "fc3/MatMul"
  input: "fc3/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc3/BatchNorm/batchnorm/mul_1"
  op: "Mul"
  input: "fc3/BatchNorm/Identity"
  input: "fc3/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc3/BatchNorm/batchnorm/sub"
  op: "Sub"
  input: "fc3/BatchNorm/beta/read"
  input: "fc3/BatchNorm/batchnorm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc3/BatchNorm/batchnorm/add_1"
  op: "Add"
  input: "fc3/BatchNorm/batchnorm/mul"
  input: "fc3/BatchNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc3/Relu"
  op: "Relu"
  input: "fc3/BatchNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc4/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "fc4/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0684653222561
      }
    }
  }
}
node {
  name: "fc4/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0684653222561
      }
    }
  }
}
node {
  name: "fc4/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "fc4/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "fc4/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "fc4/weights/Initializer/random_uniform/max"
  input: "fc4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
}
node {
  name: "fc4/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "fc4/weights/Initializer/random_uniform/RandomUniform"
  input: "fc4/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
}
node {
  name: "fc4/weights/Initializer/random_uniform"
  op: "Add"
  input: "fc4/weights/Initializer/random_uniform/mul"
  input: "fc4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
}
node {
  name: "fc4/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc4/weights/Assign"
  op: "Assign"
  input: "fc4/weights"
  input: "fc4/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc4/weights/read"
  op: "Identity"
  input: "fc4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
}
node {
  name: "fc4/MatMul"
  op: "MatMul"
  input: "fc3/Relu"
  input: "fc4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fc4/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc4/BatchNorm/beta/Assign"
  op: "Assign"
  input: "fc4/BatchNorm/beta"
  input: "fc4/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc4/BatchNorm/beta/read"
  op: "Identity"
  input: "fc4/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc4/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "fc4/BatchNorm/moving_mean"
  input: "fc4/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc4/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "fc4/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc4/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "fc4/BatchNorm/moving_variance"
  input: "fc4/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc4/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "fc4/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/moments/mean"
  op: "Mean"
  input: "fc4/MatMul"
  input: "fc4/BatchNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "fc4/BatchNorm/moments/StopGradient"
  op: "StopGradient"
  input: "fc4/BatchNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc4/BatchNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "fc4/MatMul"
  input: "fc4/BatchNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc4/BatchNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/moments/variance"
  op: "Mean"
  input: "fc4/BatchNorm/moments/SquaredDifference"
  input: "fc4/BatchNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "fc4/BatchNorm/moments/Squeeze"
  op: "Squeeze"
  input: "fc4/BatchNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/moments/Squeeze_1"
  op: "Squeeze"
  input: "fc4/BatchNorm/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/AssignMovingAvg/sub"
  op: "Sub"
  input: "fc4/BatchNorm/moving_mean/read"
  input: "fc4/BatchNorm/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/AssignMovingAvg/mul"
  op: "Mul"
  input: "fc4/BatchNorm/AssignMovingAvg/sub"
  input: "fc4/BatchNorm/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/AssignMovingAvg"
  op: "AssignSub"
  input: "fc4/BatchNorm/moving_mean"
  input: "fc4/BatchNorm/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "fc4/BatchNorm/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "fc4/BatchNorm/moving_variance/read"
  input: "fc4/BatchNorm/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "fc4/BatchNorm/AssignMovingAvg_1/sub"
  input: "fc4/BatchNorm/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/AssignMovingAvg_1"
  op: "AssignSub"
  input: "fc4/BatchNorm/moving_variance"
  input: "fc4/BatchNorm/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "fc4/BatchNorm/Identity"
  op: "Identity"
  input: "fc4/BatchNorm/moments/Squeeze"
  input: "^fc4/BatchNorm/AssignMovingAvg"
  input: "^fc4/BatchNorm/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc4/BatchNorm/Identity_1"
  op: "Identity"
  input: "fc4/BatchNorm/moments/Squeeze_1"
  input: "^fc4/BatchNorm/AssignMovingAvg"
  input: "^fc4/BatchNorm/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc4/BatchNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000475
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/batchnorm/add"
  op: "Add"
  input: "fc4/BatchNorm/Identity_1"
  input: "fc4/BatchNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc4/BatchNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "fc4/BatchNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc4/BatchNorm/batchnorm/mul"
  op: "Mul"
  input: "fc4/MatMul"
  input: "fc4/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc4/BatchNorm/batchnorm/mul_1"
  op: "Mul"
  input: "fc4/BatchNorm/Identity"
  input: "fc4/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc4/BatchNorm/batchnorm/sub"
  op: "Sub"
  input: "fc4/BatchNorm/beta/read"
  input: "fc4/BatchNorm/batchnorm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc4/BatchNorm/batchnorm/add_1"
  op: "Add"
  input: "fc4/BatchNorm/batchnorm/mul"
  input: "fc4/BatchNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc4/Relu"
  op: "Relu"
  input: "fc4/BatchNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout3/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "dropout3/dropout/Shape"
  op: "Shape"
  input: "fc4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dropout3/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dropout3/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dropout3/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout3/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dropout3/dropout/random_uniform/sub"
  op: "Sub"
  input: "dropout3/dropout/random_uniform/max"
  input: "dropout3/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout3/dropout/random_uniform/mul"
  op: "Mul"
  input: "dropout3/dropout/random_uniform/RandomUniform"
  input: "dropout3/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout3/dropout/random_uniform"
  op: "Add"
  input: "dropout3/dropout/random_uniform/mul"
  input: "dropout3/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout3/dropout/add"
  op: "Add"
  input: "dropout3/dropout/keep_prob"
  input: "dropout3/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout3/dropout/Floor"
  op: "Floor"
  input: "dropout3/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout3/dropout/div"
  op: "RealDiv"
  input: "fc4/Relu"
  input: "dropout3/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dropout3/dropout/mul"
  op: "Mul"
  input: "dropout3/dropout/div"
  input: "dropout3/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fco/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "fco/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.15191090107
      }
    }
  }
}
node {
  name: "fco/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.15191090107
      }
    }
  }
}
node {
  name: "fco/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "fco/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "fco/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "fco/weights/Initializer/random_uniform/max"
  input: "fco/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
}
node {
  name: "fco/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "fco/weights/Initializer/random_uniform/RandomUniform"
  input: "fco/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
}
node {
  name: "fco/weights/Initializer/random_uniform"
  op: "Add"
  input: "fco/weights/Initializer/random_uniform/mul"
  input: "fco/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
}
node {
  name: "fco/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fco/weights/Assign"
  op: "Assign"
  input: "fco/weights"
  input: "fco/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fco/weights/read"
  op: "Identity"
  input: "fco/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
}
node {
  name: "fco/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fco/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fco/biases/Assign"
  op: "Assign"
  input: "fco/biases"
  input: "fco/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fco/biases/read"
  op: "Identity"
  input: "fco/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
}
node {
  name: "fco/MatMul"
  op: "MatMul"
  input: "dropout3/dropout/mul"
  input: "fco/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fco/BiasAdd"
  op: "BiasAdd"
  input: "fco/MatMul"
  input: "fco/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Shape"
  op: "Shape"
  input: "fco/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Shape_1"
  op: "Shape"
  input: "fco/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Sub"
  op: "Sub"
  input: "LOSS/softmax_cross_entropy_loss/Rank_1"
  input: "LOSS/softmax_cross_entropy_loss/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Slice/begin"
  op: "Pack"
  input: "LOSS/softmax_cross_entropy_loss/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Slice"
  op: "Slice"
  input: "LOSS/softmax_cross_entropy_loss/Shape_1"
  input: "LOSS/softmax_cross_entropy_loss/Slice/begin"
  input: "LOSS/softmax_cross_entropy_loss/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/concat"
  op: "ConcatV2"
  input: "LOSS/softmax_cross_entropy_loss/concat/values_0"
  input: "LOSS/softmax_cross_entropy_loss/Slice"
  input: "LOSS/softmax_cross_entropy_loss/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Reshape"
  op: "Reshape"
  input: "fco/BiasAdd"
  input: "LOSS/softmax_cross_entropy_loss/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Shape_2"
  op: "Shape"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Sub_1"
  op: "Sub"
  input: "LOSS/softmax_cross_entropy_loss/Rank_2"
  input: "LOSS/softmax_cross_entropy_loss/Sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Slice_1/begin"
  op: "Pack"
  input: "LOSS/softmax_cross_entropy_loss/Sub_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Slice_1"
  op: "Slice"
  input: "LOSS/softmax_cross_entropy_loss/Shape_2"
  input: "LOSS/softmax_cross_entropy_loss/Slice_1/begin"
  input: "LOSS/softmax_cross_entropy_loss/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/concat_1/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/concat_1"
  op: "ConcatV2"
  input: "LOSS/softmax_cross_entropy_loss/concat_1/values_0"
  input: "LOSS/softmax_cross_entropy_loss/Slice_1"
  input: "LOSS/softmax_cross_entropy_loss/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Reshape_1"
  op: "Reshape"
  input: "Placeholder_1"
  input: "LOSS/softmax_cross_entropy_loss/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/xentropy"
  op: "SoftmaxCrossEntropyWithLogits"
  input: "LOSS/softmax_cross_entropy_loss/Reshape"
  input: "LOSS/softmax_cross_entropy_loss/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Sub_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Sub_2"
  op: "Sub"
  input: "LOSS/softmax_cross_entropy_loss/Rank"
  input: "LOSS/softmax_cross_entropy_loss/Sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Slice_2/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Slice_2/size"
  op: "Pack"
  input: "LOSS/softmax_cross_entropy_loss/Sub_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Slice_2"
  op: "Slice"
  input: "LOSS/softmax_cross_entropy_loss/Shape"
  input: "LOSS/softmax_cross_entropy_loss/Slice_2/begin"
  input: "LOSS/softmax_cross_entropy_loss/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Reshape_2"
  op: "Reshape"
  input: "LOSS/softmax_cross_entropy_loss/xentropy"
  input: "LOSS/softmax_cross_entropy_loss/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Sum"
  op: "Sum"
  input: "LOSS/softmax_cross_entropy_loss/Reshape_2"
  input: "LOSS/softmax_cross_entropy_loss/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Mul"
  op: "Mul"
  input: "LOSS/softmax_cross_entropy_loss/Sum"
  input: "LOSS/softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Sum_1"
  op: "Sum"
  input: "LOSS/softmax_cross_entropy_loss/Mul"
  input: "LOSS/softmax_cross_entropy_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Shape_3"
  op: "Shape"
  input: "LOSS/softmax_cross_entropy_loss/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Slice_3/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Slice_3/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Slice_3"
  op: "Slice"
  input: "LOSS/softmax_cross_entropy_loss/Shape_3"
  input: "LOSS/softmax_cross_entropy_loss/Slice_3/begin"
  input: "LOSS/softmax_cross_entropy_loss/Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Reshape_3"
  op: "Reshape"
  input: "LOSS/softmax_cross_entropy_loss/Slice_3"
  input: "LOSS/softmax_cross_entropy_loss/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Size"
  op: "Size"
  input: "LOSS/softmax_cross_entropy_loss/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/ToFloat_2"
  op: "Cast"
  input: "LOSS/softmax_cross_entropy_loss/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/ToFloat_3"
  op: "Cast"
  input: "LOSS/softmax_cross_entropy_loss/Reshape_3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/div"
  op: "RealDiv"
  input: "LOSS/softmax_cross_entropy_loss/ToFloat_2"
  input: "LOSS/softmax_cross_entropy_loss/ToFloat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Equal"
  op: "Equal"
  input: "LOSS/softmax_cross_entropy_loss/Const"
  input: "LOSS/softmax_cross_entropy_loss/Equal/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Select/t"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Select"
  op: "Select"
  input: "LOSS/softmax_cross_entropy_loss/Equal"
  input: "LOSS/softmax_cross_entropy_loss/Select/t"
  input: "LOSS/softmax_cross_entropy_loss/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Reshape_4"
  op: "Reshape"
  input: "LOSS/softmax_cross_entropy_loss/Reshape_3"
  input: "LOSS/softmax_cross_entropy_loss/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/ones"
  op: "Fill"
  input: "LOSS/softmax_cross_entropy_loss/Reshape_4"
  input: "LOSS/softmax_cross_entropy_loss/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Mul_1"
  op: "Mul"
  input: "LOSS/softmax_cross_entropy_loss/ones"
  input: "LOSS/softmax_cross_entropy_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Sum_2"
  op: "Sum"
  input: "LOSS/softmax_cross_entropy_loss/Mul_1"
  input: "LOSS/softmax_cross_entropy_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Sum_3"
  op: "Sum"
  input: "LOSS/softmax_cross_entropy_loss/Sum_1"
  input: "LOSS/softmax_cross_entropy_loss/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Greater"
  op: "Greater"
  input: "LOSS/softmax_cross_entropy_loss/Sum_2"
  input: "LOSS/softmax_cross_entropy_loss/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Equal_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Equal_1"
  op: "Equal"
  input: "LOSS/softmax_cross_entropy_loss/Sum_2"
  input: "LOSS/softmax_cross_entropy_loss/Equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/ones_like/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/ones_like/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/ones_like"
  op: "Fill"
  input: "LOSS/softmax_cross_entropy_loss/ones_like/Shape"
  input: "LOSS/softmax_cross_entropy_loss/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/Select_1"
  op: "Select"
  input: "LOSS/softmax_cross_entropy_loss/Equal_1"
  input: "LOSS/softmax_cross_entropy_loss/ones_like"
  input: "LOSS/softmax_cross_entropy_loss/Sum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/div_1"
  op: "RealDiv"
  input: "LOSS/softmax_cross_entropy_loss/Sum_3"
  input: "LOSS/softmax_cross_entropy_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/zeros_like"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "LOSS/softmax_cross_entropy_loss/value"
  op: "Select"
  input: "LOSS/softmax_cross_entropy_loss/Greater"
  input: "LOSS/softmax_cross_entropy_loss/div_1"
  input: "LOSS/softmax_cross_entropy_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/Variable/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ADAM/Variable/Assign"
  op: "Assign"
  input: "ADAM/Variable"
  input: "ADAM/Variable/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ADAM/Variable/read"
  op: "Identity"
  input: "ADAM/Variable"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/Variable"
      }
    }
  }
}
node {
  name: "ADAM/gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ADAM/gradients/Fill"
  op: "Fill"
  input: "ADAM/gradients/Shape"
  input: "ADAM/gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/zeros_like"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/Select"
  op: "Select"
  input: "LOSS/softmax_cross_entropy_loss/Greater"
  input: "ADAM/gradients/Fill"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/Select_1"
  op: "Select"
  input: "LOSS/softmax_cross_entropy_loss/Greater"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/zeros_like"
  input: "ADAM/gradients/Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/Select"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/Select_1"
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/Select"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/Select"
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/Select_1"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/Select_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Shape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/RealDiv"
  op: "RealDiv"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/tuple/control_dependency"
  input: "LOSS/softmax_cross_entropy_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/RealDiv"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Sum"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Neg"
  op: "Neg"
  input: "LOSS/softmax_cross_entropy_loss/Sum_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Neg"
  input: "LOSS/softmax_cross_entropy_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/RealDiv_1"
  input: "LOSS/softmax_cross_entropy_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/value_grad/tuple/control_dependency"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/mul"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Sum_1"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Reshape"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Reshape"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Reshape_1"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_3_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_3_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/tuple/control_dependency"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_3_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_3_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_3_grad/Tile"
  op: "Tile"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_3_grad/Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_3_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/zeros_like"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/Select"
  op: "Select"
  input: "LOSS/softmax_cross_entropy_loss/Equal_1"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "LOSS/softmax_cross_entropy_loss/Equal_1"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/zeros_like"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/Select"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/Select_1"
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/Select"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/Select"
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/Select_1"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/Select_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_3_grad/Tile"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_1_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_1_grad/Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_1_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Shape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_1_grad/Tile"
  input: "LOSS/softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/mul"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Sum"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/mul_1"
  op: "Mul"
  input: "LOSS/softmax_cross_entropy_loss/Sum"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/mul_1"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Sum_1"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_2_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_1_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_2_grad/Shape"
  op: "Shape"
  input: "LOSS/softmax_cross_entropy_loss/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_2_grad/Tile"
  op: "Tile"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_2_grad/Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_grad/tuple/control_dependency"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_grad/Shape"
  op: "Shape"
  input: "LOSS/softmax_cross_entropy_loss/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_grad/Tile"
  op: "Tile"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_grad/Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Shape"
  op: "Shape"
  input: "LOSS/softmax_cross_entropy_loss/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Shape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_2_grad/Tile"
  input: "LOSS/softmax_cross_entropy_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/mul"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Sum"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/mul_1"
  op: "Mul"
  input: "LOSS/softmax_cross_entropy_loss/ones"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_2_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/mul_1"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Sum_1"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Reshape"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Reshape"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Reshape_1"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/ones_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/ones_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/tuple/control_dependency"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/ones_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/zeros_like"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/Select"
  op: "Select"
  input: "LOSS/softmax_cross_entropy_loss/Equal"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/Select_1"
  op: "Select"
  input: "LOSS/softmax_cross_entropy_loss/Equal"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/zeros_like"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/Select"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/Select_1"
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/Select"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/Select"
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/Select_1"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/Select_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Shape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/RealDiv"
  op: "RealDiv"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/tuple/control_dependency_1"
  input: "LOSS/softmax_cross_entropy_loss/ToFloat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/RealDiv"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Sum"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Neg"
  op: "Neg"
  input: "LOSS/softmax_cross_entropy_loss/ToFloat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Neg"
  input: "LOSS/softmax_cross_entropy_loss/ToFloat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/RealDiv_1"
  input: "LOSS/softmax_cross_entropy_loss/ToFloat_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Select_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/mul"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Sum_1"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Reshape"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Reshape"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Reshape_1"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/div_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Reshape_2_grad/Shape"
  op: "Shape"
  input: "LOSS/softmax_cross_entropy_loss/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Sum_grad/Tile"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/zeros_like"
  op: "ZerosLike"
  input: "LOSS/softmax_cross_entropy_loss/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/xentropy_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/xentropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Reshape_2_grad/Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/xentropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/xentropy_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/xentropy_grad/ExpandDims"
  input: "LOSS/softmax_cross_entropy_loss/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Reshape_grad/Shape"
  op: "Shape"
  input: "fco/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Reshape_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/xentropy_grad/mul"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fco/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ADAM/gradients/fco/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/LOSS/softmax_cross_entropy_loss/Reshape_grad/Reshape"
  input: "^ADAM/gradients/fco/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "ADAM/gradients/fco/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/LOSS/softmax_cross_entropy_loss/Reshape_grad/Reshape"
  input: "^ADAM/gradients/fco/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/LOSS/softmax_cross_entropy_loss/Reshape_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fco/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fco/BiasAdd_grad/BiasAddGrad"
  input: "^ADAM/gradients/fco/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fco/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fco/MatMul_grad/MatMul"
  op: "MatMul"
  input: "ADAM/gradients/fco/BiasAdd_grad/tuple/control_dependency"
  input: "fco/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "ADAM/gradients/fco/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dropout3/dropout/mul"
  input: "ADAM/gradients/fco/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fco/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fco/MatMul_grad/MatMul"
  input: "^ADAM/gradients/fco/MatMul_grad/MatMul_1"
}
node {
  name: "ADAM/gradients/fco/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fco/MatMul_grad/MatMul"
  input: "^ADAM/gradients/fco/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fco/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fco/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fco/MatMul_grad/MatMul_1"
  input: "^ADAM/gradients/fco/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fco/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dropout3/dropout/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "dropout3/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/dropout3/dropout/mul_grad/Shape"
  input: "ADAM/gradients/dropout3/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/mul_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/fco/MatMul_grad/tuple/control_dependency"
  input: "dropout3/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/mul_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/dropout3/dropout/mul_grad/mul"
  input: "ADAM/gradients/dropout3/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/dropout3/dropout/mul_grad/Sum"
  input: "ADAM/gradients/dropout3/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "dropout3/dropout/div"
  input: "ADAM/gradients/fco/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/dropout3/dropout/mul_grad/mul_1"
  input: "ADAM/gradients/dropout3/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/dropout3/dropout/mul_grad/Sum_1"
  input: "ADAM/gradients/dropout3/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/dropout3/dropout/mul_grad/Reshape"
  input: "^ADAM/gradients/dropout3/dropout/mul_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/dropout3/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/dropout3/dropout/mul_grad/Reshape"
  input: "^ADAM/gradients/dropout3/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/dropout3/dropout/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/dropout3/dropout/mul_grad/Reshape_1"
  input: "^ADAM/gradients/dropout3/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/dropout3/dropout/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/Shape"
  op: "Shape"
  input: "fc4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/dropout3/dropout/div_grad/Shape"
  input: "ADAM/gradients/dropout3/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "ADAM/gradients/dropout3/dropout/mul_grad/tuple/control_dependency"
  input: "dropout3/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/dropout3/dropout/div_grad/RealDiv"
  input: "ADAM/gradients/dropout3/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/dropout3/dropout/div_grad/Sum"
  input: "ADAM/gradients/dropout3/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/Neg"
  op: "Neg"
  input: "fc4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "ADAM/gradients/dropout3/dropout/div_grad/Neg"
  input: "dropout3/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "ADAM/gradients/dropout3/dropout/div_grad/RealDiv_1"
  input: "dropout3/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/dropout3/dropout/mul_grad/tuple/control_dependency"
  input: "ADAM/gradients/dropout3/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/dropout3/dropout/div_grad/mul"
  input: "ADAM/gradients/dropout3/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/dropout3/dropout/div_grad/Sum_1"
  input: "ADAM/gradients/dropout3/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/dropout3/dropout/div_grad/Reshape"
  input: "^ADAM/gradients/dropout3/dropout/div_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/dropout3/dropout/div_grad/Reshape"
  input: "^ADAM/gradients/dropout3/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/dropout3/dropout/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/dropout3/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/dropout3/dropout/div_grad/Reshape_1"
  input: "^ADAM/gradients/dropout3/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/dropout3/dropout/div_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "ADAM/gradients/dropout3/dropout/div_grad/tuple/control_dependency"
  input: "fc4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "fc4/BatchNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Shape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/fc4/Relu_grad/ReluGrad"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Sum"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/fc4/Relu_grad/ReluGrad"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Sum_1"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Reshape"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Reshape"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Reshape_1"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Shape"
  op: "Shape"
  input: "fc4/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Shape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  input: "fc4/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/mul"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Sum"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/mul_1"
  op: "Mul"
  input: "fc4/MatMul"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/mul_1"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Sum_1"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Reshape"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Reshape"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Reshape_1"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Shape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Sum"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Neg"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Reshape"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Reshape"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Reshape_1"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Shape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "fc4/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/mul"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Sum"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/mul_1"
  op: "Mul"
  input: "fc4/BatchNorm/Identity"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/mul_1"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Sum_1"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Reshape"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Reshape"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/AddN"
  op: "AddN"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "fc4/BatchNorm/batchnorm/Rsqrt"
  input: "ADAM/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/Squeeze_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "ADAM/gradients/fc4/BatchNorm/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Shape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Sum"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Sum_1"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Reshape"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Reshape"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Reshape_1"
  input: "^ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/Squeeze_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/add_grad/tuple/control_dependency"
  input: "ADAM/gradients/fc4/BatchNorm/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Shape"
  op: "Shape"
  input: "fc4/BatchNorm/moments/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/add"
  op: "Add"
  input: "fc4/BatchNorm/moments/variance/reduction_indices"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/mod"
  op: "FloorMod"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/add"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/range"
  op: "Range"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/range/start"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Size"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Fill"
  op: "Fill"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Shape_1"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/range"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/mod"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Shape"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/DynamicStitch"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Shape"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/moments/Squeeze_1_grad/Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Tile"
  op: "Tile"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Shape_2"
  op: "Shape"
  input: "fc4/BatchNorm/moments/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Prod"
  op: "Prod"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Shape_2"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Prod_1"
  op: "Prod"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Shape_3"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Maximum_1"
  op: "Maximum"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Prod_1"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/floordiv_1"
  op: "FloorDiv"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Prod"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Cast"
  op: "Cast"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Tile"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "fc4/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Shape"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^ADAM/gradients/fc4/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/scalar"
  input: "ADAM/gradients/fc4/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "fc4/MatMul"
  input: "fc4/BatchNorm/moments/StopGradient"
  input: "^ADAM/gradients/fc4/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/mul"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/mul_1"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Sum"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/mul_1"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Sum_1"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Reshape"
  input: "^ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Neg"
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Reshape"
  input: "^ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Neg"
  input: "^ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/Neg"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Shape"
  op: "Shape"
  input: "fc4/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/add"
  op: "Add"
  input: "fc4/BatchNorm/moments/mean/reduction_indices"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/mod"
  op: "FloorMod"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/add"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/range"
  op: "Range"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/range/start"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Size"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Fill"
  op: "Fill"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Shape_1"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/range"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/mod"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Shape"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/DynamicStitch"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Shape"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/moments/Squeeze_grad/Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Tile"
  op: "Tile"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Reshape"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Shape_2"
  op: "Shape"
  input: "fc4/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Prod"
  op: "Prod"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Shape_2"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Prod_1"
  op: "Prod"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Shape_3"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Maximum_1"
  op: "Maximum"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Prod_1"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Prod"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Cast"
  op: "Cast"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Tile"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/AddN_1"
  op: "AddN"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/tuple/control_dependency"
  input: "ADAM/gradients/fc4/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "ADAM/gradients/fc4/BatchNorm/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/BatchNorm/batchnorm/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/MatMul_grad/MatMul"
  op: "MatMul"
  input: "ADAM/gradients/AddN_1"
  input: "fc4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "ADAM/gradients/fc4/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fc3/Relu"
  input: "ADAM/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc4/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fc4/MatMul_grad/MatMul"
  input: "^ADAM/gradients/fc4/MatMul_grad/MatMul_1"
}
node {
  name: "ADAM/gradients/fc4/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fc4/MatMul_grad/MatMul"
  input: "^ADAM/gradients/fc4/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc4/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fc4/MatMul_grad/MatMul_1"
  input: "^ADAM/gradients/fc4/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc4/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "ADAM/gradients/fc4/MatMul_grad/tuple/control_dependency"
  input: "fc3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "fc3/BatchNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Shape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/fc3/Relu_grad/ReluGrad"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Sum"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/fc3/Relu_grad/ReluGrad"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Sum_1"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Reshape"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Reshape"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Reshape_1"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Shape"
  op: "Shape"
  input: "fc3/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Shape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  input: "fc3/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/mul"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Sum"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/mul_1"
  op: "Mul"
  input: "fc3/MatMul"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/mul_1"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Sum_1"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Reshape"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Reshape"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Reshape_1"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Shape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Sum"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Neg"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Reshape"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Reshape"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Reshape_1"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Shape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "fc3/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/mul"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Sum"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/mul_1"
  op: "Mul"
  input: "fc3/BatchNorm/Identity"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/mul_1"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Sum_1"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Reshape"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Reshape"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/AddN_2"
  op: "AddN"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "fc3/BatchNorm/batchnorm/Rsqrt"
  input: "ADAM/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/Squeeze_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "ADAM/gradients/fc3/BatchNorm/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Shape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Sum"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Sum_1"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Reshape"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Reshape"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Reshape_1"
  input: "^ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/Squeeze_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/add_grad/tuple/control_dependency"
  input: "ADAM/gradients/fc3/BatchNorm/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Shape"
  op: "Shape"
  input: "fc3/BatchNorm/moments/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/add"
  op: "Add"
  input: "fc3/BatchNorm/moments/variance/reduction_indices"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/mod"
  op: "FloorMod"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/add"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/range"
  op: "Range"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/range/start"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Size"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Fill"
  op: "Fill"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Shape_1"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/range"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/mod"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Shape"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/DynamicStitch"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Shape"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/moments/Squeeze_1_grad/Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Tile"
  op: "Tile"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Shape_2"
  op: "Shape"
  input: "fc3/BatchNorm/moments/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Prod"
  op: "Prod"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Shape_2"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Prod_1"
  op: "Prod"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Shape_3"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Maximum_1"
  op: "Maximum"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Prod_1"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/floordiv_1"
  op: "FloorDiv"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Prod"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Cast"
  op: "Cast"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Tile"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "fc3/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Shape"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^ADAM/gradients/fc3/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/scalar"
  input: "ADAM/gradients/fc3/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "fc3/MatMul"
  input: "fc3/BatchNorm/moments/StopGradient"
  input: "^ADAM/gradients/fc3/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/mul"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/mul_1"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Sum"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/mul_1"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Sum_1"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Reshape"
  input: "^ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Neg"
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Reshape"
  input: "^ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Neg"
  input: "^ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/Neg"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Shape"
  op: "Shape"
  input: "fc3/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/add"
  op: "Add"
  input: "fc3/BatchNorm/moments/mean/reduction_indices"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/mod"
  op: "FloorMod"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/add"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/range"
  op: "Range"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/range/start"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Size"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Fill"
  op: "Fill"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Shape_1"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/range"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/mod"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Shape"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/DynamicStitch"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Shape"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/moments/Squeeze_grad/Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Tile"
  op: "Tile"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Reshape"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Shape_2"
  op: "Shape"
  input: "fc3/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Prod"
  op: "Prod"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Shape_2"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Prod_1"
  op: "Prod"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Shape_3"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Maximum_1"
  op: "Maximum"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Prod_1"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Prod"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Cast"
  op: "Cast"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Tile"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/AddN_3"
  op: "AddN"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/tuple/control_dependency"
  input: "ADAM/gradients/fc3/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "ADAM/gradients/fc3/BatchNorm/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/BatchNorm/batchnorm/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/MatMul_grad/MatMul"
  op: "MatMul"
  input: "ADAM/gradients/AddN_3"
  input: "fc3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "ADAM/gradients/fc3/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "flatten3/Reshape"
  input: "ADAM/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/fc3/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/fc3/MatMul_grad/MatMul"
  input: "^ADAM/gradients/fc3/MatMul_grad/MatMul_1"
}
node {
  name: "ADAM/gradients/fc3/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/fc3/MatMul_grad/MatMul"
  input: "^ADAM/gradients/fc3/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "ADAM/gradients/fc3/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/fc3/MatMul_grad/MatMul_1"
  input: "^ADAM/gradients/fc3/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/fc3/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/flatten3/Reshape_grad/Shape"
  op: "Shape"
  input: "pool3/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/flatten3/Reshape_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/fc3/MatMul_grad/tuple/control_dependency"
  input: "ADAM/gradients/flatten3/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/pool3/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "dropout2/dropout/mul"
  input: "pool3/MaxPool"
  input: "ADAM/gradients/flatten3/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/mul_grad/Shape"
  op: "Shape"
  input: "dropout2/dropout/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "dropout2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/dropout2/dropout/mul_grad/Shape"
  input: "ADAM/gradients/dropout2/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/mul_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/pool3/MaxPool_grad/MaxPoolGrad"
  input: "dropout2/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/mul_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/dropout2/dropout/mul_grad/mul"
  input: "ADAM/gradients/dropout2/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/dropout2/dropout/mul_grad/Sum"
  input: "ADAM/gradients/dropout2/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/mul_grad/mul_1"
  op: "Mul"
  input: "dropout2/dropout/div"
  input: "ADAM/gradients/pool3/MaxPool_grad/MaxPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/dropout2/dropout/mul_grad/mul_1"
  input: "ADAM/gradients/dropout2/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/dropout2/dropout/mul_grad/Sum_1"
  input: "ADAM/gradients/dropout2/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/dropout2/dropout/mul_grad/Reshape"
  input: "^ADAM/gradients/dropout2/dropout/mul_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/dropout2/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/dropout2/dropout/mul_grad/Reshape"
  input: "^ADAM/gradients/dropout2/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/dropout2/dropout/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/dropout2/dropout/mul_grad/Reshape_1"
  input: "^ADAM/gradients/dropout2/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/dropout2/dropout/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/Shape"
  op: "Shape"
  input: "conv3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/dropout2/dropout/div_grad/Shape"
  input: "ADAM/gradients/dropout2/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "ADAM/gradients/dropout2/dropout/mul_grad/tuple/control_dependency"
  input: "dropout2/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/dropout2/dropout/div_grad/RealDiv"
  input: "ADAM/gradients/dropout2/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/dropout2/dropout/div_grad/Sum"
  input: "ADAM/gradients/dropout2/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/Neg"
  op: "Neg"
  input: "conv3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "ADAM/gradients/dropout2/dropout/div_grad/Neg"
  input: "dropout2/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "ADAM/gradients/dropout2/dropout/div_grad/RealDiv_1"
  input: "dropout2/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/dropout2/dropout/mul_grad/tuple/control_dependency"
  input: "ADAM/gradients/dropout2/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/dropout2/dropout/div_grad/mul"
  input: "ADAM/gradients/dropout2/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/dropout2/dropout/div_grad/Sum_1"
  input: "ADAM/gradients/dropout2/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/dropout2/dropout/div_grad/Reshape"
  input: "^ADAM/gradients/dropout2/dropout/div_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/dropout2/dropout/div_grad/Reshape"
  input: "^ADAM/gradients/dropout2/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/dropout2/dropout/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/dropout2/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/dropout2/dropout/div_grad/Reshape_1"
  input: "^ADAM/gradients/dropout2/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/dropout2/dropout/div_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "ADAM/gradients/dropout2/dropout/div_grad/tuple/control_dependency"
  input: "conv3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "conv3/BatchNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Shape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv3/Relu_grad/ReluGrad"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Sum"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv3/Relu_grad/ReluGrad"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Sum_1"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Reshape"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Reshape"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Reshape_1"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Shape"
  op: "Shape"
  input: "conv3/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Shape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  input: "conv3/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/mul"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Sum"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/mul_1"
  op: "Mul"
  input: "conv3/convolution"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/mul_1"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Sum_1"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Reshape"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Reshape"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Reshape_1"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Shape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Sum"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Neg"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Reshape"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Reshape"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Reshape_1"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Shape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "conv3/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/mul"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Sum"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/mul_1"
  op: "Mul"
  input: "conv3/BatchNorm/Identity"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/mul_1"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Sum_1"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Reshape"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Reshape"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/AddN_4"
  op: "AddN"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "conv3/BatchNorm/batchnorm/Rsqrt"
  input: "ADAM/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/Squeeze_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "ADAM/gradients/conv3/BatchNorm/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Shape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Sum"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Sum_1"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Reshape"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Reshape"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Reshape_1"
  input: "^ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/Squeeze_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/add_grad/tuple/control_dependency"
  input: "ADAM/gradients/conv3/BatchNorm/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Shape"
  op: "Shape"
  input: "conv3/BatchNorm/moments/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/add"
  op: "Add"
  input: "conv3/BatchNorm/moments/variance/reduction_indices"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/mod"
  op: "FloorMod"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/add"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/range"
  op: "Range"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/range/start"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Size"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Fill"
  op: "Fill"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Shape_1"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/range"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/mod"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Shape"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/DynamicStitch"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Shape"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/moments/Squeeze_1_grad/Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Tile"
  op: "Tile"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Shape_2"
  op: "Shape"
  input: "conv3/BatchNorm/moments/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Prod"
  op: "Prod"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Shape_2"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Prod_1"
  op: "Prod"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Shape_3"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Maximum_1"
  op: "Maximum"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Prod_1"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/floordiv_1"
  op: "FloorDiv"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Prod"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Cast"
  op: "Cast"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Tile"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "conv3/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Shape"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^ADAM/gradients/conv3/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/scalar"
  input: "ADAM/gradients/conv3/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "conv3/convolution"
  input: "conv3/BatchNorm/moments/StopGradient"
  input: "^ADAM/gradients/conv3/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/mul"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/mul_1"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Sum"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/mul_1"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Sum_1"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Reshape"
  input: "^ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Neg"
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Reshape"
  input: "^ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Neg"
  input: "^ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/Neg"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Shape"
  op: "Shape"
  input: "conv3/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/add"
  op: "Add"
  input: "conv3/BatchNorm/moments/mean/reduction_indices"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/mod"
  op: "FloorMod"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/add"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/range"
  op: "Range"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/range/start"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Size"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Fill"
  op: "Fill"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Shape_1"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/range"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/mod"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Shape"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/DynamicStitch"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Shape"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/moments/Squeeze_grad/Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Tile"
  op: "Tile"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Reshape"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Shape_2"
  op: "Shape"
  input: "conv3/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Prod"
  op: "Prod"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Shape_2"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Prod_1"
  op: "Prod"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Shape_3"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Maximum_1"
  op: "Maximum"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Prod_1"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Prod"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Cast"
  op: "Cast"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Tile"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/AddN_5"
  op: "AddN"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/tuple/control_dependency"
  input: "ADAM/gradients/conv3/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "ADAM/gradients/conv3/BatchNorm/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/BatchNorm/batchnorm/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/convolution_grad/Shape"
  op: "Shape"
  input: "pool2/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv3/convolution_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "ADAM/gradients/conv3/convolution_grad/Shape"
  input: "conv3/weights/read"
  input: "ADAM/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "ADAM/gradients/conv3/convolution_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/convolution_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "pool2/MaxPool"
  input: "ADAM/gradients/conv3/convolution_grad/Shape_1"
  input: "ADAM/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "ADAM/gradients/conv3/convolution_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv3/convolution_grad/Conv2DBackpropInput"
  input: "^ADAM/gradients/conv3/convolution_grad/Conv2DBackpropFilter"
}
node {
  name: "ADAM/gradients/conv3/convolution_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv3/convolution_grad/Conv2DBackpropInput"
  input: "^ADAM/gradients/conv3/convolution_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/convolution_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv3/convolution_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv3/convolution_grad/Conv2DBackpropFilter"
  input: "^ADAM/gradients/conv3/convolution_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv3/convolution_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "ADAM/gradients/pool2/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "conv2/Relu"
  input: "pool2/MaxPool"
  input: "ADAM/gradients/conv3/convolution_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "ADAM/gradients/pool2/MaxPool_grad/MaxPoolGrad"
  input: "conv2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "conv2/BatchNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Shape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv2/Relu_grad/ReluGrad"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Sum"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv2/Relu_grad/ReluGrad"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Sum_1"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Reshape"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Reshape"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Reshape_1"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Shape"
  op: "Shape"
  input: "conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Shape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  input: "conv2/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/mul"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Sum"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/mul_1"
  op: "Mul"
  input: "conv2/convolution"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/mul_1"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Sum_1"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Reshape"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Reshape"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Reshape_1"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Shape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Sum"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Neg"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Reshape"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Reshape"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Reshape_1"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Shape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "conv2/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/mul"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Sum"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/mul_1"
  op: "Mul"
  input: "conv2/BatchNorm/Identity"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/mul_1"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Sum_1"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Reshape"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Reshape"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/AddN_6"
  op: "AddN"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "conv2/BatchNorm/batchnorm/Rsqrt"
  input: "ADAM/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/Squeeze_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "ADAM/gradients/conv2/BatchNorm/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Shape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Sum"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Sum_1"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Reshape"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Reshape"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Reshape_1"
  input: "^ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/Squeeze_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/add_grad/tuple/control_dependency"
  input: "ADAM/gradients/conv2/BatchNorm/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Shape"
  op: "Shape"
  input: "conv2/BatchNorm/moments/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/add"
  op: "Add"
  input: "conv2/BatchNorm/moments/variance/reduction_indices"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/mod"
  op: "FloorMod"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/add"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/range"
  op: "Range"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/range/start"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Size"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Fill"
  op: "Fill"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Shape_1"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/range"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/mod"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Shape"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/DynamicStitch"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Shape"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/moments/Squeeze_1_grad/Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Tile"
  op: "Tile"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Shape_2"
  op: "Shape"
  input: "conv2/BatchNorm/moments/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Prod"
  op: "Prod"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Shape_2"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Prod_1"
  op: "Prod"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Shape_3"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Maximum_1"
  op: "Maximum"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Prod_1"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/floordiv_1"
  op: "FloorDiv"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Prod"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Cast"
  op: "Cast"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Tile"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Shape"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^ADAM/gradients/conv2/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/scalar"
  input: "ADAM/gradients/conv2/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "conv2/convolution"
  input: "conv2/BatchNorm/moments/StopGradient"
  input: "^ADAM/gradients/conv2/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/mul"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/mul_1"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Sum"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/mul_1"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Sum_1"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Reshape"
  input: "^ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Neg"
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Reshape"
  input: "^ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Neg"
  input: "^ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/Neg"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Shape"
  op: "Shape"
  input: "conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/add"
  op: "Add"
  input: "conv2/BatchNorm/moments/mean/reduction_indices"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/mod"
  op: "FloorMod"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/add"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/range"
  op: "Range"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/range/start"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Size"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Fill"
  op: "Fill"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Shape_1"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/range"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/mod"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Shape"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/DynamicStitch"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Shape"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/moments/Squeeze_grad/Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Tile"
  op: "Tile"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Reshape"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Shape_2"
  op: "Shape"
  input: "conv2/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Prod"
  op: "Prod"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Shape_2"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Prod_1"
  op: "Prod"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Shape_3"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Maximum_1"
  op: "Maximum"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Prod_1"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Prod"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Cast"
  op: "Cast"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Tile"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/AddN_7"
  op: "AddN"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/tuple/control_dependency"
  input: "ADAM/gradients/conv2/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "ADAM/gradients/conv2/BatchNorm/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/BatchNorm/batchnorm/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/convolution_grad/Shape"
  op: "Shape"
  input: "pool1/MaxPool"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv2/convolution_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "ADAM/gradients/conv2/convolution_grad/Shape"
  input: "conv2/weights/read"
  input: "ADAM/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "ADAM/gradients/conv2/convolution_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/convolution_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "pool1/MaxPool"
  input: "ADAM/gradients/conv2/convolution_grad/Shape_1"
  input: "ADAM/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "ADAM/gradients/conv2/convolution_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv2/convolution_grad/Conv2DBackpropInput"
  input: "^ADAM/gradients/conv2/convolution_grad/Conv2DBackpropFilter"
}
node {
  name: "ADAM/gradients/conv2/convolution_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv2/convolution_grad/Conv2DBackpropInput"
  input: "^ADAM/gradients/conv2/convolution_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/convolution_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv2/convolution_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv2/convolution_grad/Conv2DBackpropFilter"
  input: "^ADAM/gradients/conv2/convolution_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv2/convolution_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "ADAM/gradients/pool1/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "conv1/Relu"
  input: "pool1/MaxPool"
  input: "ADAM/gradients/conv2/convolution_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "ADAM/gradients/pool1/MaxPool_grad/MaxPoolGrad"
  input: "conv1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Shape"
  op: "Shape"
  input: "conv1/BatchNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Shape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv1/Relu_grad/ReluGrad"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Sum"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv1/Relu_grad/ReluGrad"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Sum_1"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Reshape"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Reshape"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Reshape_1"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Shape"
  op: "Shape"
  input: "conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Shape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  input: "conv1/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/mul"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Sum"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/mul_1"
  op: "Mul"
  input: "conv1/convolution"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/mul_1"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Sum_1"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Reshape"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Reshape"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Reshape_1"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Shape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Sum"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Neg"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Reshape"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Reshape"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Reshape_1"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Shape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "conv1/BatchNorm/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/mul"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Sum"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/mul_1"
  op: "Mul"
  input: "conv1/BatchNorm/Identity"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/mul_1"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Sum_1"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Reshape"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Reshape"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/AddN_8"
  op: "AddN"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/tuple/control_dependency_1"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "conv1/BatchNorm/batchnorm/Rsqrt"
  input: "ADAM/gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/Squeeze_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "ADAM/gradients/conv1/BatchNorm/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Shape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Sum"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Sum_1"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Reshape"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Reshape_1"
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Reshape"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Reshape_1"
  input: "^ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/Squeeze_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/add_grad/tuple/control_dependency"
  input: "ADAM/gradients/conv1/BatchNorm/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Shape"
  op: "Shape"
  input: "conv1/BatchNorm/moments/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/add"
  op: "Add"
  input: "conv1/BatchNorm/moments/variance/reduction_indices"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/mod"
  op: "FloorMod"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/add"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/range"
  op: "Range"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/range/start"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Size"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Fill"
  op: "Fill"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Shape_1"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/range"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/mod"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Shape"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/DynamicStitch"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Shape"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/moments/Squeeze_1_grad/Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Tile"
  op: "Tile"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Shape_2"
  op: "Shape"
  input: "conv1/BatchNorm/moments/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Prod"
  op: "Prod"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Shape_2"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Prod_1"
  op: "Prod"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Shape_3"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Maximum_1"
  op: "Maximum"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Prod_1"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/floordiv_1"
  op: "FloorDiv"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Prod"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Cast"
  op: "Cast"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Tile"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Shape"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^ADAM/gradients/conv1/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/mul"
  op: "Mul"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/scalar"
  input: "ADAM/gradients/conv1/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "conv1/convolution"
  input: "conv1/BatchNorm/moments/StopGradient"
  input: "^ADAM/gradients/conv1/BatchNorm/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/mul"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/mul_1"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Sum"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/mul_1"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Sum_1"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Reshape"
  input: "^ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Neg"
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Reshape"
  input: "^ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Neg"
  input: "^ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/Neg"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Shape"
  op: "Shape"
  input: "conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/add"
  op: "Add"
  input: "conv1/BatchNorm/moments/mean/reduction_indices"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/mod"
  op: "FloorMod"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/add"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/range"
  op: "Range"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/range/start"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Size"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Fill"
  op: "Fill"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Shape_1"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/range"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/mod"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Shape"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/DynamicStitch"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Shape"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/moments/Squeeze_grad/Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Tile"
  op: "Tile"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Reshape"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Shape_2"
  op: "Shape"
  input: "conv1/convolution"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Shape_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Prod"
  op: "Prod"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Shape_2"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Prod_1"
  op: "Prod"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Shape_3"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Maximum_1"
  op: "Maximum"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Prod_1"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Prod"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Cast"
  op: "Cast"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Tile"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ADAM/gradients/AddN_9"
  op: "AddN"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/tuple/control_dependency"
  input: "ADAM/gradients/conv1/BatchNorm/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "ADAM/gradients/conv1/BatchNorm/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/BatchNorm/batchnorm/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/convolution_grad/Shape"
  op: "Shape"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ADAM/gradients/conv1/convolution_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "ADAM/gradients/conv1/convolution_grad/Shape"
  input: "conv1/weights/read"
  input: "ADAM/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "ADAM/gradients/conv1/convolution_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\003\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/convolution_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "Placeholder"
  input: "ADAM/gradients/conv1/convolution_grad/Shape_1"
  input: "ADAM/gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "ADAM/gradients/conv1/convolution_grad/tuple/group_deps"
  op: "NoOp"
  input: "^ADAM/gradients/conv1/convolution_grad/Conv2DBackpropInput"
  input: "^ADAM/gradients/conv1/convolution_grad/Conv2DBackpropFilter"
}
node {
  name: "ADAM/gradients/conv1/convolution_grad/tuple/control_dependency"
  op: "Identity"
  input: "ADAM/gradients/conv1/convolution_grad/Conv2DBackpropInput"
  input: "^ADAM/gradients/conv1/convolution_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/convolution_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "ADAM/gradients/conv1/convolution_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "ADAM/gradients/conv1/convolution_grad/Conv2DBackpropFilter"
  input: "^ADAM/gradients/conv1/convolution_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/gradients/conv1/convolution_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "ADAM/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "ADAM/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ADAM/beta1_power/Assign"
  op: "Assign"
  input: "ADAM/beta1_power"
  input: "ADAM/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ADAM/beta1_power/read"
  op: "Identity"
  input: "ADAM/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ADAM/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "ADAM/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ADAM/beta2_power/Assign"
  op: "Assign"
  input: "ADAM/beta2_power"
  input: "ADAM/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ADAM/beta2_power/read"
  op: "Identity"
  input: "ADAM/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "conv1/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1/weights/Adam/Assign"
  op: "Assign"
  input: "conv1/weights/Adam"
  input: "conv1/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/weights/Adam/read"
  op: "Identity"
  input: "conv1/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
}
node {
  name: "conv1/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1/weights/Adam_1/Assign"
  op: "Assign"
  input: "conv1/weights/Adam_1"
  input: "conv1/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/weights/Adam_1/read"
  op: "Identity"
  input: "conv1/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1/BatchNorm/beta/Adam/Assign"
  op: "Assign"
  input: "conv1/BatchNorm/beta/Adam"
  input: "conv1/BatchNorm/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/BatchNorm/beta/Adam/read"
  op: "Identity"
  input: "conv1/BatchNorm/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1/BatchNorm/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1/BatchNorm/beta/Adam_1/Assign"
  op: "Assign"
  input: "conv1/BatchNorm/beta/Adam_1"
  input: "conv1/BatchNorm/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1/BatchNorm/beta/Adam_1/read"
  op: "Identity"
  input: "conv1/BatchNorm/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "conv2/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2/weights/Adam/Assign"
  op: "Assign"
  input: "conv2/weights/Adam"
  input: "conv2/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/weights/Adam/read"
  op: "Identity"
  input: "conv2/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
}
node {
  name: "conv2/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 32
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2/weights/Adam_1/Assign"
  op: "Assign"
  input: "conv2/weights/Adam_1"
  input: "conv2/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/weights/Adam_1/read"
  op: "Identity"
  input: "conv2/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2/BatchNorm/beta/Adam/Assign"
  op: "Assign"
  input: "conv2/BatchNorm/beta/Adam"
  input: "conv2/BatchNorm/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/BatchNorm/beta/Adam/read"
  op: "Identity"
  input: "conv2/BatchNorm/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2/BatchNorm/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2/BatchNorm/beta/Adam_1/Assign"
  op: "Assign"
  input: "conv2/BatchNorm/beta/Adam_1"
  input: "conv2/BatchNorm/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2/BatchNorm/beta/Adam_1/read"
  op: "Identity"
  input: "conv2/BatchNorm/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "conv3/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv3/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv3/weights/Adam/Assign"
  op: "Assign"
  input: "conv3/weights/Adam"
  input: "conv3/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv3/weights/Adam/read"
  op: "Identity"
  input: "conv3/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
}
node {
  name: "conv3/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv3/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv3/weights/Adam_1/Assign"
  op: "Assign"
  input: "conv3/weights/Adam_1"
  input: "conv3/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv3/weights/Adam_1/read"
  op: "Identity"
  input: "conv3/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv3/BatchNorm/beta/Adam/Assign"
  op: "Assign"
  input: "conv3/BatchNorm/beta/Adam"
  input: "conv3/BatchNorm/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv3/BatchNorm/beta/Adam/read"
  op: "Identity"
  input: "conv3/BatchNorm/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv3/BatchNorm/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv3/BatchNorm/beta/Adam_1/Assign"
  op: "Assign"
  input: "conv3/BatchNorm/beta/Adam_1"
  input: "conv3/BatchNorm/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv3/BatchNorm/beta/Adam_1/read"
  op: "Identity"
  input: "conv3/BatchNorm/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "fc3/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16384
          }
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc3/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16384
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc3/weights/Adam/Assign"
  op: "Assign"
  input: "fc3/weights/Adam"
  input: "fc3/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc3/weights/Adam/read"
  op: "Identity"
  input: "fc3/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
}
node {
  name: "fc3/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16384
          }
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc3/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16384
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc3/weights/Adam_1/Assign"
  op: "Assign"
  input: "fc3/weights/Adam_1"
  input: "fc3/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc3/weights/Adam_1/read"
  op: "Identity"
  input: "fc3/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc3/BatchNorm/beta/Adam/Assign"
  op: "Assign"
  input: "fc3/BatchNorm/beta/Adam"
  input: "fc3/BatchNorm/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc3/BatchNorm/beta/Adam/read"
  op: "Identity"
  input: "fc3/BatchNorm/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc3/BatchNorm/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc3/BatchNorm/beta/Adam_1/Assign"
  op: "Assign"
  input: "fc3/BatchNorm/beta/Adam_1"
  input: "fc3/BatchNorm/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc3/BatchNorm/beta/Adam_1/read"
  op: "Identity"
  input: "fc3/BatchNorm/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "fc4/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc4/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc4/weights/Adam/Assign"
  op: "Assign"
  input: "fc4/weights/Adam"
  input: "fc4/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc4/weights/Adam/read"
  op: "Identity"
  input: "fc4/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
}
node {
  name: "fc4/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc4/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc4/weights/Adam_1/Assign"
  op: "Assign"
  input: "fc4/weights/Adam_1"
  input: "fc4/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc4/weights/Adam_1/read"
  op: "Identity"
  input: "fc4/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc4/BatchNorm/beta/Adam/Assign"
  op: "Assign"
  input: "fc4/BatchNorm/beta/Adam"
  input: "fc4/BatchNorm/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc4/BatchNorm/beta/Adam/read"
  op: "Identity"
  input: "fc4/BatchNorm/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc4/BatchNorm/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc4/BatchNorm/beta/Adam_1/Assign"
  op: "Assign"
  input: "fc4/BatchNorm/beta/Adam_1"
  input: "fc4/BatchNorm/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc4/BatchNorm/beta/Adam_1/read"
  op: "Identity"
  input: "fc4/BatchNorm/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "fco/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fco/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fco/weights/Adam/Assign"
  op: "Assign"
  input: "fco/weights/Adam"
  input: "fco/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fco/weights/Adam/read"
  op: "Identity"
  input: "fco/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
}
node {
  name: "fco/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fco/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fco/weights/Adam_1/Assign"
  op: "Assign"
  input: "fco/weights/Adam_1"
  input: "fco/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fco/weights/Adam_1/read"
  op: "Identity"
  input: "fco/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
}
node {
  name: "fco/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fco/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fco/biases/Adam/Assign"
  op: "Assign"
  input: "fco/biases/Adam"
  input: "fco/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fco/biases/Adam/read"
  op: "Identity"
  input: "fco/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
}
node {
  name: "fco/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fco/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fco/biases/Adam_1/Assign"
  op: "Assign"
  input: "fco/biases/Adam_1"
  input: "fco/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fco/biases/Adam_1/read"
  op: "Identity"
  input: "fco/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
}
node {
  name: "ADAM/Adam/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999974738e-05
      }
    }
  }
}
node {
  name: "ADAM/Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.899999976158
      }
    }
  }
}
node {
  name: "ADAM/Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.999000012875
      }
    }
  }
}
node {
  name: "ADAM/Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993923e-09
      }
    }
  }
}
node {
  name: "ADAM/Adam/update_conv1/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "conv1/weights"
  input: "conv1/weights/Adam"
  input: "conv1/weights/Adam_1"
  input: "ADAM/beta1_power/read"
  input: "ADAM/beta2_power/read"
  input: "ADAM/Adam/learning_rate"
  input: "ADAM/Adam/beta1"
  input: "ADAM/Adam/beta2"
  input: "ADAM/Adam/epsilon"
  input: "ADAM/gradients/conv1/convolution_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/Adam/update_conv1/BatchNorm/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "conv1/BatchNorm/beta"
  input: "conv1/BatchNorm/beta/Adam"
  input: "conv1/BatchNorm/beta/Adam_1"
  input: "ADAM/beta1_power/read"
  input: "ADAM/beta2_power/read"
  input: "ADAM/Adam/learning_rate"
  input: "ADAM/Adam/beta1"
  input: "ADAM/Adam/beta2"
  input: "ADAM/Adam/epsilon"
  input: "ADAM/gradients/conv1/BatchNorm/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/Adam/update_conv2/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2/weights"
  input: "conv2/weights/Adam"
  input: "conv2/weights/Adam_1"
  input: "ADAM/beta1_power/read"
  input: "ADAM/beta2_power/read"
  input: "ADAM/Adam/learning_rate"
  input: "ADAM/Adam/beta1"
  input: "ADAM/Adam/beta2"
  input: "ADAM/Adam/epsilon"
  input: "ADAM/gradients/conv2/convolution_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/Adam/update_conv2/BatchNorm/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "conv2/BatchNorm/beta"
  input: "conv2/BatchNorm/beta/Adam"
  input: "conv2/BatchNorm/beta/Adam_1"
  input: "ADAM/beta1_power/read"
  input: "ADAM/beta2_power/read"
  input: "ADAM/Adam/learning_rate"
  input: "ADAM/Adam/beta1"
  input: "ADAM/Adam/beta2"
  input: "ADAM/Adam/epsilon"
  input: "ADAM/gradients/conv2/BatchNorm/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/Adam/update_conv3/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "conv3/weights"
  input: "conv3/weights/Adam"
  input: "conv3/weights/Adam_1"
  input: "ADAM/beta1_power/read"
  input: "ADAM/beta2_power/read"
  input: "ADAM/Adam/learning_rate"
  input: "ADAM/Adam/beta1"
  input: "ADAM/Adam/beta2"
  input: "ADAM/Adam/epsilon"
  input: "ADAM/gradients/conv3/convolution_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/Adam/update_conv3/BatchNorm/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "conv3/BatchNorm/beta"
  input: "conv3/BatchNorm/beta/Adam"
  input: "conv3/BatchNorm/beta/Adam_1"
  input: "ADAM/beta1_power/read"
  input: "ADAM/beta2_power/read"
  input: "ADAM/Adam/learning_rate"
  input: "ADAM/Adam/beta1"
  input: "ADAM/Adam/beta2"
  input: "ADAM/Adam/epsilon"
  input: "ADAM/gradients/conv3/BatchNorm/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/Adam/update_fc3/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fc3/weights"
  input: "fc3/weights/Adam"
  input: "fc3/weights/Adam_1"
  input: "ADAM/beta1_power/read"
  input: "ADAM/beta2_power/read"
  input: "ADAM/Adam/learning_rate"
  input: "ADAM/Adam/beta1"
  input: "ADAM/Adam/beta2"
  input: "ADAM/Adam/epsilon"
  input: "ADAM/gradients/fc3/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/Adam/update_fc3/BatchNorm/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "fc3/BatchNorm/beta"
  input: "fc3/BatchNorm/beta/Adam"
  input: "fc3/BatchNorm/beta/Adam_1"
  input: "ADAM/beta1_power/read"
  input: "ADAM/beta2_power/read"
  input: "ADAM/Adam/learning_rate"
  input: "ADAM/Adam/beta1"
  input: "ADAM/Adam/beta2"
  input: "ADAM/Adam/epsilon"
  input: "ADAM/gradients/fc3/BatchNorm/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/Adam/update_fc4/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fc4/weights"
  input: "fc4/weights/Adam"
  input: "fc4/weights/Adam_1"
  input: "ADAM/beta1_power/read"
  input: "ADAM/beta2_power/read"
  input: "ADAM/Adam/learning_rate"
  input: "ADAM/Adam/beta1"
  input: "ADAM/Adam/beta2"
  input: "ADAM/Adam/epsilon"
  input: "ADAM/gradients/fc4/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/Adam/update_fc4/BatchNorm/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "fc4/BatchNorm/beta"
  input: "fc4/BatchNorm/beta/Adam"
  input: "fc4/BatchNorm/beta/Adam_1"
  input: "ADAM/beta1_power/read"
  input: "ADAM/beta2_power/read"
  input: "ADAM/Adam/learning_rate"
  input: "ADAM/Adam/beta1"
  input: "ADAM/Adam/beta2"
  input: "ADAM/Adam/epsilon"
  input: "ADAM/gradients/fc4/BatchNorm/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/Adam/update_fco/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fco/weights"
  input: "fco/weights/Adam"
  input: "fco/weights/Adam_1"
  input: "ADAM/beta1_power/read"
  input: "ADAM/beta2_power/read"
  input: "ADAM/Adam/learning_rate"
  input: "ADAM/Adam/beta1"
  input: "ADAM/Adam/beta2"
  input: "ADAM/Adam/epsilon"
  input: "ADAM/gradients/fco/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/Adam/update_fco/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "fco/biases"
  input: "fco/biases/Adam"
  input: "fco/biases/Adam_1"
  input: "ADAM/beta1_power/read"
  input: "ADAM/beta2_power/read"
  input: "ADAM/Adam/learning_rate"
  input: "ADAM/Adam/beta1"
  input: "ADAM/Adam/beta2"
  input: "ADAM/Adam/epsilon"
  input: "ADAM/gradients/fco/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "ADAM/Adam/mul"
  op: "Mul"
  input: "ADAM/beta1_power/read"
  input: "ADAM/Adam/beta1"
  input: "^ADAM/Adam/update_conv1/weights/ApplyAdam"
  input: "^ADAM/Adam/update_conv1/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_conv2/weights/ApplyAdam"
  input: "^ADAM/Adam/update_conv2/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_conv3/weights/ApplyAdam"
  input: "^ADAM/Adam/update_conv3/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_fc3/weights/ApplyAdam"
  input: "^ADAM/Adam/update_fc3/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_fc4/weights/ApplyAdam"
  input: "^ADAM/Adam/update_fc4/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_fco/weights/ApplyAdam"
  input: "^ADAM/Adam/update_fco/biases/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ADAM/Adam/Assign"
  op: "Assign"
  input: "ADAM/beta1_power"
  input: "ADAM/Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ADAM/Adam/mul_1"
  op: "Mul"
  input: "ADAM/beta2_power/read"
  input: "ADAM/Adam/beta2"
  input: "^ADAM/Adam/update_conv1/weights/ApplyAdam"
  input: "^ADAM/Adam/update_conv1/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_conv2/weights/ApplyAdam"
  input: "^ADAM/Adam/update_conv2/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_conv3/weights/ApplyAdam"
  input: "^ADAM/Adam/update_conv3/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_fc3/weights/ApplyAdam"
  input: "^ADAM/Adam/update_fc3/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_fc4/weights/ApplyAdam"
  input: "^ADAM/Adam/update_fc4/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_fco/weights/ApplyAdam"
  input: "^ADAM/Adam/update_fco/biases/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "ADAM/Adam/Assign_1"
  op: "Assign"
  input: "ADAM/beta2_power"
  input: "ADAM/Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ADAM/Adam"
  op: "NoOp"
  input: "^ADAM/Adam/update_conv1/weights/ApplyAdam"
  input: "^ADAM/Adam/update_conv1/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_conv2/weights/ApplyAdam"
  input: "^ADAM/Adam/update_conv2/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_conv3/weights/ApplyAdam"
  input: "^ADAM/Adam/update_conv3/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_fc3/weights/ApplyAdam"
  input: "^ADAM/Adam/update_fc3/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_fc4/weights/ApplyAdam"
  input: "^ADAM/Adam/update_fc4/BatchNorm/beta/ApplyAdam"
  input: "^ADAM/Adam/update_fco/weights/ApplyAdam"
  input: "^ADAM/Adam/update_fco/biases/ApplyAdam"
  input: "^ADAM/Adam/Assign"
  input: "^ADAM/Adam/Assign_1"
}
node {
  name: "ACC/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ACC/ArgMax"
  op: "ArgMax"
  input: "fco/BiasAdd"
  input: "ACC/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ACC/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ACC/ArgMax_1"
  op: "ArgMax"
  input: "Placeholder_1"
  input: "ACC/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ACC/Equal"
  op: "Equal"
  input: "ACC/ArgMax"
  input: "ACC/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ACC/Cast"
  op: "Cast"
  input: "ACC/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "ACC/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ACC/Mean"
  op: "Mean"
  input: "ACC/Cast"
  input: "ACC/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 49
          }
        }
        string_val: "ADAM/Variable"
        string_val: "ADAM/beta1_power"
        string_val: "ADAM/beta2_power"
        string_val: "conv1/BatchNorm/beta"
        string_val: "conv1/BatchNorm/beta/Adam"
        string_val: "conv1/BatchNorm/beta/Adam_1"
        string_val: "conv1/BatchNorm/moving_mean"
        string_val: "conv1/BatchNorm/moving_variance"
        string_val: "conv1/weights"
        string_val: "conv1/weights/Adam"
        string_val: "conv1/weights/Adam_1"
        string_val: "conv2/BatchNorm/beta"
        string_val: "conv2/BatchNorm/beta/Adam"
        string_val: "conv2/BatchNorm/beta/Adam_1"
        string_val: "conv2/BatchNorm/moving_mean"
        string_val: "conv2/BatchNorm/moving_variance"
        string_val: "conv2/weights"
        string_val: "conv2/weights/Adam"
        string_val: "conv2/weights/Adam_1"
        string_val: "conv3/BatchNorm/beta"
        string_val: "conv3/BatchNorm/beta/Adam"
        string_val: "conv3/BatchNorm/beta/Adam_1"
        string_val: "conv3/BatchNorm/moving_mean"
        string_val: "conv3/BatchNorm/moving_variance"
        string_val: "conv3/weights"
        string_val: "conv3/weights/Adam"
        string_val: "conv3/weights/Adam_1"
        string_val: "fc3/BatchNorm/beta"
        string_val: "fc3/BatchNorm/beta/Adam"
        string_val: "fc3/BatchNorm/beta/Adam_1"
        string_val: "fc3/BatchNorm/moving_mean"
        string_val: "fc3/BatchNorm/moving_variance"
        string_val: "fc3/weights"
        string_val: "fc3/weights/Adam"
        string_val: "fc3/weights/Adam_1"
        string_val: "fc4/BatchNorm/beta"
        string_val: "fc4/BatchNorm/beta/Adam"
        string_val: "fc4/BatchNorm/beta/Adam_1"
        string_val: "fc4/BatchNorm/moving_mean"
        string_val: "fc4/BatchNorm/moving_variance"
        string_val: "fc4/weights"
        string_val: "fc4/weights/Adam"
        string_val: "fc4/weights/Adam_1"
        string_val: "fco/biases"
        string_val: "fco/biases/Adam"
        string_val: "fco/biases/Adam_1"
        string_val: "fco/weights"
        string_val: "fco/weights/Adam"
        string_val: "fco/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 49
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "ADAM/Variable"
  input: "ADAM/beta1_power"
  input: "ADAM/beta2_power"
  input: "conv1/BatchNorm/beta"
  input: "conv1/BatchNorm/beta/Adam"
  input: "conv1/BatchNorm/beta/Adam_1"
  input: "conv1/BatchNorm/moving_mean"
  input: "conv1/BatchNorm/moving_variance"
  input: "conv1/weights"
  input: "conv1/weights/Adam"
  input: "conv1/weights/Adam_1"
  input: "conv2/BatchNorm/beta"
  input: "conv2/BatchNorm/beta/Adam"
  input: "conv2/BatchNorm/beta/Adam_1"
  input: "conv2/BatchNorm/moving_mean"
  input: "conv2/BatchNorm/moving_variance"
  input: "conv2/weights"
  input: "conv2/weights/Adam"
  input: "conv2/weights/Adam_1"
  input: "conv3/BatchNorm/beta"
  input: "conv3/BatchNorm/beta/Adam"
  input: "conv3/BatchNorm/beta/Adam_1"
  input: "conv3/BatchNorm/moving_mean"
  input: "conv3/BatchNorm/moving_variance"
  input: "conv3/weights"
  input: "conv3/weights/Adam"
  input: "conv3/weights/Adam_1"
  input: "fc3/BatchNorm/beta"
  input: "fc3/BatchNorm/beta/Adam"
  input: "fc3/BatchNorm/beta/Adam_1"
  input: "fc3/BatchNorm/moving_mean"
  input: "fc3/BatchNorm/moving_variance"
  input: "fc3/weights"
  input: "fc3/weights/Adam"
  input: "fc3/weights/Adam_1"
  input: "fc4/BatchNorm/beta"
  input: "fc4/BatchNorm/beta/Adam"
  input: "fc4/BatchNorm/beta/Adam_1"
  input: "fc4/BatchNorm/moving_mean"
  input: "fc4/BatchNorm/moving_variance"
  input: "fc4/weights"
  input: "fc4/weights/Adam"
  input: "fc4/weights/Adam_1"
  input: "fco/biases"
  input: "fco/biases/Adam"
  input: "fco/biases/Adam_1"
  input: "fco/weights"
  input: "fco/weights/Adam"
  input: "fco/weights/Adam_1"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "ADAM/Variable"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT32
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "ADAM/Variable"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ADAM/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "ADAM/beta1_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "ADAM/beta1_power"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "ADAM/beta2_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "ADAM/beta2_power"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "conv1/BatchNorm/beta"
  input: "save/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv1/BatchNorm/beta/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "conv1/BatchNorm/beta/Adam"
  input: "save/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv1/BatchNorm/beta/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "conv1/BatchNorm/beta/Adam_1"
  input: "save/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "conv1/BatchNorm/moving_mean"
  input: "save/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "conv1/BatchNorm/moving_variance"
  input: "save/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_8/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv1/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_8"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_8/tensor_names"
  input: "save/RestoreV2_8/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "conv1/weights"
  input: "save/RestoreV2_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_9/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv1/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_9"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_9/tensor_names"
  input: "save/RestoreV2_9/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "conv1/weights/Adam"
  input: "save/RestoreV2_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_10/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv1/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_10"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_10/tensor_names"
  input: "save/RestoreV2_10/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "conv1/weights/Adam_1"
  input: "save/RestoreV2_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_11/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_11"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_11/tensor_names"
  input: "save/RestoreV2_11/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "conv2/BatchNorm/beta"
  input: "save/RestoreV2_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_12/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2/BatchNorm/beta/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_12/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_12"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_12/tensor_names"
  input: "save/RestoreV2_12/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "conv2/BatchNorm/beta/Adam"
  input: "save/RestoreV2_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_13/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2/BatchNorm/beta/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_13/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_13"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_13/tensor_names"
  input: "save/RestoreV2_13/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "conv2/BatchNorm/beta/Adam_1"
  input: "save/RestoreV2_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_14/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "save/RestoreV2_14/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_14"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_14/tensor_names"
  input: "save/RestoreV2_14/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "conv2/BatchNorm/moving_mean"
  input: "save/RestoreV2_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_15/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "save/RestoreV2_15/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_15"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_15/tensor_names"
  input: "save/RestoreV2_15/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "conv2/BatchNorm/moving_variance"
  input: "save/RestoreV2_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_16/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_16/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_16"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_16/tensor_names"
  input: "save/RestoreV2_16/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "conv2/weights"
  input: "save/RestoreV2_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_17/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_17/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_17"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_17/tensor_names"
  input: "save/RestoreV2_17/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "conv2/weights/Adam"
  input: "save/RestoreV2_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_18/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv2/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_18/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_18"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_18/tensor_names"
  input: "save/RestoreV2_18/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "conv2/weights/Adam_1"
  input: "save/RestoreV2_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_19/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "save/RestoreV2_19/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_19"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_19/tensor_names"
  input: "save/RestoreV2_19/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "conv3/BatchNorm/beta"
  input: "save/RestoreV2_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_20/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv3/BatchNorm/beta/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_20/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_20"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_20/tensor_names"
  input: "save/RestoreV2_20/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "conv3/BatchNorm/beta/Adam"
  input: "save/RestoreV2_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_21/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv3/BatchNorm/beta/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_21/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_21"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_21/tensor_names"
  input: "save/RestoreV2_21/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "conv3/BatchNorm/beta/Adam_1"
  input: "save/RestoreV2_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_22/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "save/RestoreV2_22/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_22"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_22/tensor_names"
  input: "save/RestoreV2_22/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "conv3/BatchNorm/moving_mean"
  input: "save/RestoreV2_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_23/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "save/RestoreV2_23/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_23"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_23/tensor_names"
  input: "save/RestoreV2_23/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "conv3/BatchNorm/moving_variance"
  input: "save/RestoreV2_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_24/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv3/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_24/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_24"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_24/tensor_names"
  input: "save/RestoreV2_24/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "conv3/weights"
  input: "save/RestoreV2_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_25/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv3/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_25/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_25"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_25/tensor_names"
  input: "save/RestoreV2_25/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "conv3/weights/Adam"
  input: "save/RestoreV2_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_26/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "conv3/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_26/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_26"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_26/tensor_names"
  input: "save/RestoreV2_26/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "conv3/weights/Adam_1"
  input: "save/RestoreV2_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_27/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "save/RestoreV2_27/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_27"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_27/tensor_names"
  input: "save/RestoreV2_27/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "fc3/BatchNorm/beta"
  input: "save/RestoreV2_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_28/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc3/BatchNorm/beta/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_28/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_28"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_28/tensor_names"
  input: "save/RestoreV2_28/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "fc3/BatchNorm/beta/Adam"
  input: "save/RestoreV2_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_29/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc3/BatchNorm/beta/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_29/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_29"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_29/tensor_names"
  input: "save/RestoreV2_29/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "fc3/BatchNorm/beta/Adam_1"
  input: "save/RestoreV2_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_30/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "save/RestoreV2_30/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_30"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_30/tensor_names"
  input: "save/RestoreV2_30/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "fc3/BatchNorm/moving_mean"
  input: "save/RestoreV2_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_31/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "save/RestoreV2_31/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_31"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_31/tensor_names"
  input: "save/RestoreV2_31/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "fc3/BatchNorm/moving_variance"
  input: "save/RestoreV2_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_32/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc3/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_32/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_32"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_32/tensor_names"
  input: "save/RestoreV2_32/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "fc3/weights"
  input: "save/RestoreV2_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_33/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc3/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_33/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_33"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_33/tensor_names"
  input: "save/RestoreV2_33/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "fc3/weights/Adam"
  input: "save/RestoreV2_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_34/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc3/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_34/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_34"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_34/tensor_names"
  input: "save/RestoreV2_34/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "fc3/weights/Adam_1"
  input: "save/RestoreV2_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_35/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc4/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "save/RestoreV2_35/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_35"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_35/tensor_names"
  input: "save/RestoreV2_35/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "fc4/BatchNorm/beta"
  input: "save/RestoreV2_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_36/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc4/BatchNorm/beta/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_36/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_36"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_36/tensor_names"
  input: "save/RestoreV2_36/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "fc4/BatchNorm/beta/Adam"
  input: "save/RestoreV2_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_37/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc4/BatchNorm/beta/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_37/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_37"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_37/tensor_names"
  input: "save/RestoreV2_37/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "fc4/BatchNorm/beta/Adam_1"
  input: "save/RestoreV2_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_38/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc4/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "save/RestoreV2_38/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_38"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_38/tensor_names"
  input: "save/RestoreV2_38/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "fc4/BatchNorm/moving_mean"
  input: "save/RestoreV2_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_39/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc4/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "save/RestoreV2_39/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_39"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_39/tensor_names"
  input: "save/RestoreV2_39/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "fc4/BatchNorm/moving_variance"
  input: "save/RestoreV2_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_40/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc4/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_40/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_40"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_40/tensor_names"
  input: "save/RestoreV2_40/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "fc4/weights"
  input: "save/RestoreV2_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_41/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc4/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_41/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_41"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_41/tensor_names"
  input: "save/RestoreV2_41/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "fc4/weights/Adam"
  input: "save/RestoreV2_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_42/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fc4/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_42/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_42"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_42/tensor_names"
  input: "save/RestoreV2_42/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "fc4/weights/Adam_1"
  input: "save/RestoreV2_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_43/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fco/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_43/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_43"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_43/tensor_names"
  input: "save/RestoreV2_43/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "fco/biases"
  input: "save/RestoreV2_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_44/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fco/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_44/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_44"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_44/tensor_names"
  input: "save/RestoreV2_44/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "fco/biases/Adam"
  input: "save/RestoreV2_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_45/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fco/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_45/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_45"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_45/tensor_names"
  input: "save/RestoreV2_45/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "fco/biases/Adam_1"
  input: "save/RestoreV2_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_46/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fco/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_46/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_46"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_46/tensor_names"
  input: "save/RestoreV2_46/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "fco/weights"
  input: "save/RestoreV2_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_47/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fco/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_47/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_47"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_47/tensor_names"
  input: "save/RestoreV2_47/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "fco/weights/Adam"
  input: "save/RestoreV2_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_48/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fco/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_48/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_48"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_48/tensor_names"
  input: "save/RestoreV2_48/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "fco/weights/Adam_1"
  input: "save/RestoreV2_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fco/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
}
node {
  name: "init"
  op: "NoOp"
  input: "^conv1/weights/Assign"
  input: "^conv1/BatchNorm/beta/Assign"
  input: "^conv1/BatchNorm/moving_mean/Assign"
  input: "^conv1/BatchNorm/moving_variance/Assign"
  input: "^conv2/weights/Assign"
  input: "^conv2/BatchNorm/beta/Assign"
  input: "^conv2/BatchNorm/moving_mean/Assign"
  input: "^conv2/BatchNorm/moving_variance/Assign"
  input: "^conv3/weights/Assign"
  input: "^conv3/BatchNorm/beta/Assign"
  input: "^conv3/BatchNorm/moving_mean/Assign"
  input: "^conv3/BatchNorm/moving_variance/Assign"
  input: "^fc3/weights/Assign"
  input: "^fc3/BatchNorm/beta/Assign"
  input: "^fc3/BatchNorm/moving_mean/Assign"
  input: "^fc3/BatchNorm/moving_variance/Assign"
  input: "^fc4/weights/Assign"
  input: "^fc4/BatchNorm/beta/Assign"
  input: "^fc4/BatchNorm/moving_mean/Assign"
  input: "^fc4/BatchNorm/moving_variance/Assign"
  input: "^fco/weights/Assign"
  input: "^fco/biases/Assign"
  input: "^ADAM/Variable/Assign"
  input: "^ADAM/beta1_power/Assign"
  input: "^ADAM/beta2_power/Assign"
  input: "^conv1/weights/Adam/Assign"
  input: "^conv1/weights/Adam_1/Assign"
  input: "^conv1/BatchNorm/beta/Adam/Assign"
  input: "^conv1/BatchNorm/beta/Adam_1/Assign"
  input: "^conv2/weights/Adam/Assign"
  input: "^conv2/weights/Adam_1/Assign"
  input: "^conv2/BatchNorm/beta/Adam/Assign"
  input: "^conv2/BatchNorm/beta/Adam_1/Assign"
  input: "^conv3/weights/Adam/Assign"
  input: "^conv3/weights/Adam_1/Assign"
  input: "^conv3/BatchNorm/beta/Adam/Assign"
  input: "^conv3/BatchNorm/beta/Adam_1/Assign"
  input: "^fc3/weights/Adam/Assign"
  input: "^fc3/weights/Adam_1/Assign"
  input: "^fc3/BatchNorm/beta/Adam/Assign"
  input: "^fc3/BatchNorm/beta/Adam_1/Assign"
  input: "^fc4/weights/Adam/Assign"
  input: "^fc4/weights/Adam_1/Assign"
  input: "^fc4/BatchNorm/beta/Adam/Assign"
  input: "^fc4/BatchNorm/beta/Adam_1/Assign"
  input: "^fco/weights/Adam/Assign"
  input: "^fco/weights/Adam_1/Assign"
  input: "^fco/biases/Adam/Assign"
  input: "^fco/biases/Adam_1/Assign"
}
versions {
  producer: 24
}
